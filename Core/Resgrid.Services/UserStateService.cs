using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Resgrid.Model;
using Resgrid.Model.Events;
using Resgrid.Model.Repositories;
using Resgrid.Model.Services;
using Resgrid.Providers.Bus;
using Resgrid.Model.Providers;

namespace Resgrid.Services
{
	public class UserStateService : IUserStateService
	{
		private static string CacheKey = "DepartmentUserStates_{0}";
		private static TimeSpan CacheLength = TimeSpan.FromDays(14);

		private readonly IUserStatesRepository _userStateRepository;
		private readonly IDepartmentsService _departmentsService;
		private readonly IEventAggregator _eventAggregator;
		private readonly ICacheProvider _cacheProvider;

		public UserStateService(IUserStatesRepository userStateRepository, IDepartmentsService departmentsService,
			IEventAggregator eventAggregator, ICacheProvider cacheProvider)
		{
			_userStateRepository = userStateRepository;
			_departmentsService = departmentsService;
			_eventAggregator = eventAggregator;
			_cacheProvider = cacheProvider;
		}

		public async Task<UserState> GetUserStateByIdAsync(int userStateId)
		{
			return await _userStateRepository.GetByIdAsync(userStateId);
		}

		public async Task<UserState> GetLastUserStateByUserIdAsync(string userId)
		{
			var userState = await _userStateRepository.GetLastUserStateByUserIdAsync(userId);

			if (userState != null)
				return userState;

			var state = new UserState();
			state.UserId = userId;
			state.Timestamp = DateTime.UtcNow;
			state.State = (int)UserStateTypes.Available;
			state.AutoGenerated = true;

			return state;
		}

		public async Task<UserState> GetPreviousUserStateAsync(string userId, int userStateId)
		{
			var userState = await _userStateRepository.GetPreviousUserStateByUserIdAsync(userId, userStateId);

			if (userState != null)
				return userState;

			var state = new UserState();
			state.UserId = userId;
			state.Timestamp = DateTime.UtcNow;
			state.State = (int)UserStateTypes.Available;

			return state;
		}

		public async Task<UserState> CreateUserState(string userId, int departmentId, int userStateType, CancellationToken cancellationToken = default(CancellationToken))
		{
			var us = new UserState();
			us.UserId = userId;
			us.DepartmentId = departmentId;
			us.State = userStateType;
			us.Timestamp = DateTime.Now.ToUniversalTime();

			var saved = await _userStateRepository.SaveOrUpdateAsync(us, cancellationToken);
			await _eventAggregator.SendMessage<UserStaffingEvent>(new UserStaffingEvent() { DepartmentId = departmentId, Staffing = us });
			InvalidateLatestStatesForDepartmentCache(departmentId);

			return saved;
		}

		public async Task<UserState> CreateUserState(string userId, int departmentId, int userStateType, string note, CancellationToken cancellationToken = default(CancellationToken))
		{
			var us = new UserState();
			us.UserId = userId;
			us.DepartmentId = departmentId;
			us.State = userStateType;
			us.Timestamp = DateTime.UtcNow;
			us.Note = note;

			var saved = await _userStateRepository.SaveOrUpdateAsync(us, cancellationToken);
			await _eventAggregator.SendMessage<UserStaffingEvent>(new UserStaffingEvent() { DepartmentId = departmentId, Staffing = us });
			InvalidateLatestStatesForDepartmentCache(departmentId);

			return saved;
		}

		public async Task<UserState> CreateUserStateAsync(string userId, int departmentId, int userStateType, string note, DateTime timeStamp, CancellationToken cancellationToken = default(CancellationToken))
		{
			var us = new UserState();
			us.UserId = userId;
			us.DepartmentId = departmentId;
			us.State = userStateType;
			us.Timestamp = timeStamp;
			us.Note = note;

			var saved = await _userStateRepository.SaveOrUpdateAsync(us, cancellationToken);
			await _eventAggregator.SendMessage<UserStaffingEvent>(new UserStaffingEvent() { DepartmentId = departmentId, Staffing = us });
			InvalidateLatestStatesForDepartmentCache(departmentId);

			return saved;
		}

		public async Task<List<UserState>> GetStatesForDepartmentAsync(int departmentId)
		{
			var states = new List<UserState>();
			var users = await _departmentsService.GetAllUsersForDepartmentAsync(departmentId);

			foreach (var u in users)
			{
				states.Add(await GetLastUserStateByUserIdAsync(u.UserId));
			}

			return states;
		}

		public async Task<List<UserState>> GetAllStatesForDepartmentInDateRangeAsync(int departmentId, DateTime startDate, DateTime endDate)
		{
			var states = await _userStateRepository.GetAllUserStatesByDepartmentIdInRangeAsync(departmentId, startDate, endDate);

			return states.ToList();
		}

		public async Task<bool> DeleteStatesForUserAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
		{
			var states = await _userStateRepository.GetUserStatesByUserIdAsync(userId);

			foreach (var state in states)
			{
				await _userStateRepository.DeleteAsync(state, cancellationToken);
			}

			return true;
		}

		public void InvalidateLatestStatesForDepartmentCache(int departmentId)
		{
			_cacheProvider.Remove(string.Format(CacheKey, departmentId));
		}

		public async Task<List<UserState>> GetLatestStatesForDepartmentAsync(int departmentId, bool bypassCache = false)
		{
			async Task<List<UserState>> getUserStates()
			{
				var states = await _userStateRepository.GetLatestUserStatesByDepartmentIdAsync(departmentId);

				return states.GroupBy(l => l.UserId)
				.Select(g => g.OrderByDescending(l => l.UserStateId).First())
				.ToList();
			}

			if (!bypassCache)
				return await _cacheProvider.RetrieveAsync(string.Format(CacheKey, departmentId), getUserStates, CacheLength);

			return await getUserStates();
		}
	}
}
