using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Resgrid.Model.Identity;
using ProtoBuf;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Resgrid.Model
{
	[ProtoContract]
	[Table("UserStates")]
	public class UserState : IEntity
	{
		[Key]
		[Required]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[ProtoMember(1)]
		public int UserStateId { get; set; }

		[Required]
		[ProtoMember(2)]
		public string UserId { get; set; }

		[ProtoMember(3)]
		public int DepartmentId { get; set; }

		[Required]
		[ProtoMember(4)]
		public int State { get; set; }

		[ProtoMember(5)]
		public DateTime Timestamp { get; set; }

		[MaxLength(3000)]
		[ProtoMember(6)]
		public string Note { get; set; }

		[ForeignKey("UserId")]
		public virtual IdentityUser User { get; set; }

		[NotMapped]
		[JsonIgnore]
		public object IdValue
		{
			get { return UserStateId; }
			set { UserStateId = (int)value; }
		}

		[NotMapped]
		public string TableName => "UserStates";

		[NotMapped]
		public string IdName => "UserStateId";

		[NotMapped]
		public int IdType => 0;

		[NotMapped]
		public IEnumerable<string> IgnoredProperties => new string[] { "IdValue", "IdType", "TableName", "IdName", "User", "AutoGenerated" };

		[NotMapped]
		public bool AutoGenerated { get; set; }

		public string GetStaffingText()
		{
			switch (((UserStateTypes)State))
			{
				case UserStateTypes.Available:
					return "Available";
				case UserStateTypes.Delayed:
					return "Delayed";
				case UserStateTypes.Unavailable:
					return "Unavailable";
				case UserStateTypes.Committed:
					return "Committed";
				case UserStateTypes.OnShift:
					return "On Shift";
				default:
					throw new ArgumentOutOfRangeException();
			}
		}

		public string GetStaffingCss()
		{
			switch (((UserStateTypes)State))
			{
				case UserStateTypes.Available:
					return "label-default";
				case UserStateTypes.Delayed:
					return "label-warning";
				case UserStateTypes.Unavailable:
					return "label-danger";
				case UserStateTypes.Committed:
					return "label-info";
				case UserStateTypes.OnShift:
					return "label-info";
				default:
					throw new ArgumentOutOfRangeException();
			}
		}
	}
}
